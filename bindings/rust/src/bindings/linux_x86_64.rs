// Pre-generated FFI bindings for Linux x86_64 (x86_64-unknown-linux-gnu)
// Generated by bindgen 0.69.5 from zenroom.h

/* automatically generated by rust-bindgen 0.69.5 */

pub const ERR_INIT: u32 = 4;
pub const ERR_PARSE: u32 = 3;
pub const ERR_EXEC: u32 = 2;
pub const ERR_GENERIC: u32 = 1;
pub const SUCCESS: u32 = 0;
extern "C" {
    pub fn zenroom_exec(
        script: *const ::core::ffi::c_char,
        conf: *const ::core::ffi::c_char,
        keys: *const ::core::ffi::c_char,
        data: *const ::core::ffi::c_char,
        extra: *const ::core::ffi::c_char,
        context: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn zencode_exec(
        script: *const ::core::ffi::c_char,
        conf: *const ::core::ffi::c_char,
        keys: *const ::core::ffi::c_char,
        data: *const ::core::ffi::c_char,
        extra: *const ::core::ffi::c_char,
        context: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn zenroom_exec_tobuf(
        script: *const ::core::ffi::c_char,
        conf: *const ::core::ffi::c_char,
        keys: *const ::core::ffi::c_char,
        data: *const ::core::ffi::c_char,
        extra: *const ::core::ffi::c_char,
        context: *const ::core::ffi::c_char,
        stdout_buf: *mut ::core::ffi::c_char,
        stdout_len: usize,
        stderr_buf: *mut ::core::ffi::c_char,
        stderr_len: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn zencode_exec_tobuf(
        script: *const ::core::ffi::c_char,
        conf: *const ::core::ffi::c_char,
        keys: *const ::core::ffi::c_char,
        data: *const ::core::ffi::c_char,
        extra: *const ::core::ffi::c_char,
        context: *const ::core::ffi::c_char,
        stdout_buf: *mut ::core::ffi::c_char,
        stdout_len: usize,
        stderr_buf: *mut ::core::ffi::c_char,
        stderr_len: usize,
    ) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zenroom_t {
    pub lua: *mut ::core::ffi::c_void,
    pub stdout_buf: *mut ::core::ffi::c_char,
    pub stdout_len: usize,
    pub stdout_pos: usize,
    pub stdout_full: usize,
    pub stderr_buf: *mut ::core::ffi::c_char,
    pub stderr_len: usize,
    pub stderr_pos: usize,
    pub stderr_full: usize,
    pub random_generator: *mut ::core::ffi::c_void,
    pub random_seed: [::core::ffi::c_char; 68usize],
    pub runtime_random256: [::core::ffi::c_char; 260usize],
    pub random_external: ::core::ffi::c_int,
    pub scope: ::core::ffi::c_int,
    pub debuglevel: ::core::ffi::c_int,
    pub errorlevel: ::core::ffi::c_int,
    pub logformat: ::core::ffi::c_int,
    pub userdata: *mut ::core::ffi::c_void,
    pub zconf_rngseed: [::core::ffi::c_char; 132usize],
    pub str_maxiter: [::core::ffi::c_char; 11usize],
    pub str_maxmem: [::core::ffi::c_char; 11usize],
    pub sfpool_blocknum: ::core::ffi::c_int,
    pub sfpool_blocksize: ::core::ffi::c_int,
    pub exitcode: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_zenroom_t() {
    const UNINIT: ::core::mem::MaybeUninit<zenroom_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<zenroom_t>(),
        608usize,
        concat!("Size of: ", stringify!(zenroom_t))
    );
    assert_eq!(
        ::core::mem::align_of::<zenroom_t>(),
        8usize,
        concat!("Alignment of ", stringify!(zenroom_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lua) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(lua)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stdout_buf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(stdout_buf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stdout_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(stdout_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stdout_pos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(stdout_pos)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stdout_full) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(stdout_full)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stderr_buf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(stderr_buf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stderr_len) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(stderr_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stderr_pos) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(stderr_pos)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stderr_full) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(stderr_full)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).random_generator) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(random_generator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).random_seed) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(random_seed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).runtime_random256) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(runtime_random256)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).random_external) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(random_external)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).scope) as usize - ptr as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).debuglevel) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(debuglevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).errorlevel) as usize - ptr as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(errorlevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).logformat) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(logformat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).zconf_rngseed) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(zconf_rngseed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).str_maxiter) as usize - ptr as usize },
        572usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(str_maxiter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).str_maxmem) as usize - ptr as usize },
        583usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(str_maxmem)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sfpool_blocknum) as usize - ptr as usize },
        596usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(sfpool_blocknum)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sfpool_blocksize) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(sfpool_blocksize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exitcode) as usize - ptr as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(zenroom_t),
            "::",
            stringify!(exitcode)
        )
    );
}
extern "C" {
    pub fn zen_init(
        conf: *const ::core::ffi::c_char,
        keys: *const ::core::ffi::c_char,
        data: *const ::core::ffi::c_char,
    ) -> *mut zenroom_t;
}
extern "C" {
    pub fn zen_init_extra(
        conf: *const ::core::ffi::c_char,
        keys: *const ::core::ffi::c_char,
        data: *const ::core::ffi::c_char,
        extra: *const ::core::ffi::c_char,
        context: *const ::core::ffi::c_char,
    ) -> *mut zenroom_t;
}
extern "C" {
    pub fn zen_exec_lua(
        Z: *mut zenroom_t,
        script: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn zen_exec_zencode(
        Z: *mut zenroom_t,
        script: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn zen_teardown(zenroom: *mut zenroom_t);
}
