name: zenroom
on:
  push:
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - '*.md'
    branches:
      - master
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - '*.md'
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  reuse:
    name: üö® REUSE Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: fsfe/reuse-action@v5

  c-lint:
    name: üö® C lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-cpplint@master
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-check
          targets: --recursive src
          level: warning
          flags: --linelength=120 # Optional
          filter: "-readability/braces\
            ,-readability/casting\
            ,-whitespace/comma\
            ,-whitespace/braces\
            ,-whitespace/comments\
            ,-whitespace/indent\
            ,-whitespace/newline\
            ,-whitespace/operators\
            ,-whitespace/parens\
            ,-whitespace/tab\
            " # Optional
        #    - name: Fail fast?!
        #      if: steps.linter.outputs.checks-failed > 0
        #      run: |
        #        echo "üò§ Some files failed the C linting checks!"

  lua-lint:
    name: üö® Lua lint
    runs-on: ubuntu-latest
    steps:
    # - uses: dorny/paths-filter@v2
    #   with:
    #     filters: |
    #       src:
    #         - 'src/lua'
    # - if: steps.changes.outputs.src == 'true'
    - uses: actions/checkout@v4
    - name: Setup luacheck
      run: |
          if ! hash luacheck &>/dev/null; then
            sudo apt-get install -yq luarocks 1>/dev/null || exit 1
            sudo luarocks install luacheck 1>/dev/null || exit 1
            sudo luarocks install lanes &>/dev/null || true
          fi
          luacheck --version
      shell: bash
    - name: üö® LUA lint
      continue-on-error: true
      working-directory: src/lua
      run: |
        luacheck --config .luacheckrc --std lua54 .

  linux-test:
    name: üêß Linux check tests (gcc and clang)
    needs: [reuse, c-lint, lua-lint]
    strategy:
      matrix:
        command: [COMPILER=gcc, COMPILER=clang]
      fail-fast: false
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - uses: hendrikmuhs/ccache-action@v1.2
      - name: install dependencies
        run: |
          sudo apt install -yq jq libreadline-dev
          ${{ matrix.command }} sudo apt install -yq $COMPILER
          pip3 install --prefer-binary meson ninja
      - name: Build GNU/Linux ${{ matrix.command }}
        run: |
          make linux-exe ${{ matrix.command }}
          make -C src clean
          make linux-lib ${{ matrix.command }}
      - name: Check all tests on ${{ matrix.command }}
        run: |
          make check

  windows-build:
    name: ü™ü Windows build test
    needs: [reuse, c-lint, lua-lint]
    if: "github.event_name == 'pull_request'"
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: hendrikmuhs/ccache-action@v1.2
      - name: install dependencies
        run : |
          sudo apt install -y jq gcc-mingw-w64
      - name: Build x86_64 windows .exe
        run: |
          make win-exe CCACHE=1
          make clean -C src
          make win-dll CCACHE=1

  osx-test:
    name: üçé Apple OSX check tests
    needs: [reuse, c-lint, lua-lint]
    if: "github.event_name == 'pull_request'"
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install dependencies
        run: |
          pip3 install --prefer-binary meson ninja
      - uses: hendrikmuhs/ccache-action@v1.2
      - run: |
          make osx-exe CCACHE=1
          make -C src clean
          make osx-lib CCACHE=1
          otool -hv libzenroom.dylib
          make check-osx

  arm32-test:
    name: ü¶æ ARM32 build test
    needs: [reuse, c-lint, lua-lint]
    if: "contains(github.event.pull_request.labels.*.name, 'TEST_ARM32') && github.event_name == 'pull_request'"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pguyot/arm-runner-action@v2
        with:
          commands: |
            sudo apt-get update -yq
            sudo apt-get install -yq --no-install-recommends make cmake gcc jq libreadline-dev xxd git python3-venv
            make linux-exe
            # Testing on ARM32 in Qemu takes too long. This should be tested on-site
            # python3 -m venv .venv
            # . .venv/bin/activate && pip install --prefer-binary meson ninja
            # make check

  go-build-check:
    name: üêπ go build & checks
    needs: [reuse, c-lint, lua-lint]
    runs-on: ubuntu-latest
    if: "!contains(github.event.pull_request.labels.*.name, 'SKIP_GO') && github.event_name == 'pull_request'"
    strategy:
      matrix:
        go: ['stable','oldstable']
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: hendrikmuhs/ccache-action@v1.2
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: false
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install dependencies
        run: |
          pip3 install --prefer-binary meson ninja
          sudo apt-get install -qy libreadline-dev
      - run: |
          make linux-exe CCACHE=1
          cp zencode-exec /usr/local/bin/
      - name: üß™ test bindings go-${{ matrix.go }}
        working-directory: bindings/golang/zenroom
        run: make test
#       - name: üîê check crypto with go-${{ matrix.go }}
#         run: make check-go

  rust-build-check:
    name: ü¶Ä rust build & checks
    needs: [reuse, c-lint, lua-lint]
    runs-on: ubuntu-latest
    if: "!contains(github.event.pull_request.labels.*.name, 'SKIP_RUST') && github.event_name == 'pull_request'"
    strategy:
      matrix:
        rust: ['stable', 'nightly']
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: hendrikmuhs/ccache-action@v1.2
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install dependencies
        run: |
          pip3 install --prefer-binary meson ninja
          sudo apt-get install -qy libreadline-dev
      - run: |
          make linux-exe CCACHE=1
          cp zencode-exec /usr/local/bin/
      - name: üß™ test bindings rust-${{ matrix.rust }}
        working-directory: bindings/rust
        run: cargo test
      - name: üîê check crypto with rust-${{ matrix.rust }}
        run: make check-rs

  js-build-check:
    name: üêØ NodeJS WASM check tests
    needs: [reuse, c-lint, lua-lint]
    runs-on: ubuntu-latest
    if: "!contains(github.event.pull_request.labels.*.name, 'SKIP_JS') && github.event_name == 'pull_request'"
    strategy:
      matrix:
        node-version: [20.18.0]
    env:
      EM_VERSION: 4.0.1
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{ env.EM_VERSION }}
      - name: Install dependencies
        run: |
          pip3 install --prefer-binary meson ninja
      - name: Build Zenroom Wasm
        run: |
          make node-wasm CCACHE=1
        env:
          EMSCRIPTEN: ${{ env.EMSDK }}/upstream/emscripten
      - name: üß™ test zencode with node-${{ matrix.node-version }}
        run: |
          make check-js

  python-check:
    name: üêç Python checks
    needs: [reuse, c-lint, lua-lint]
    if: "!contains(github.event.pull_request.labels.*.name, 'SKIP_PY') && github.event_name == 'pull_request'"
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: bindings/python3
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies on Linux
        run: |
          sudo apt update
          sudo apt install -yq cmake libreadline-dev
        if: runner.os == 'Linux'
      - name: Build zencode-exec on Linux
        run: |
          cd ../..
          make linux-exe RELEASE=1
          cp zencode-exec /usr/local/bin/
        if: runner.os == 'Linux'
      - name: Build zencode-exec on Apple/OSX
        run: |
          cd ../..
          make osx-exe RELEASE=1
          cp zencode-exec.command /usr/local/bin/zencode-exec
        if: runner.os == 'macOS'
      - run: |
          ./prepare.sh
          pipx install meson
          pipx install ninja
          pip3 install .[test]
      - run: pytest -s tests

  semantic-release:
    name: ü§ñ Semantic release
    needs: [linux-test]
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'master' && github.event_name == 'push' }}
    outputs:
      release: ${{ steps.tag_release.outputs.release }}
      version: ${{ steps.tag_release.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - run: yarn
      - name: Tag release
        id: tag_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release | tee semantic-release.log
          if [[ `git tag --points-at HEAD` == "" ]]; then
            echo "release=False" >> $GITHUB_OUTPUT
          else
            echo "release=True" >> $GITHUB_OUTPUT
            awk '/Published release/ { printf("version=v%s\n",$8) }' semantic-release.log >> $GITHUB_OUTPUT
          fi

  js-build-release:
    name: üêØ js build release
    needs: [semantic-release]
    if: ${{ needs.semantic-release.outputs.release == 'True' }}
    runs-on: ubuntu-latest
    env:
      EM_VERSION: 4.0.1
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20.18.0
      - uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{ env.EM_VERSION }}
      - name: Build Zenroom Wasm
        run: |
          make node-wasm RELEASE=1 CCACHE=1
        env:
          EMSCRIPTEN: ${{ env.EMSDK }}/upstream/emscripten
      - uses: actions/upload-artifact@v4
        with:
          name: javascript-artifact
          path: |
            ./bindings/javascript/CHANGELOG.md
            ./bindings/javascript/LICENSE
            ./bindings/javascript/package.json
            ./bindings/javascript/README.md
            ./bindings/javascript/dist/

  build-release-on-ubuntu:
    name: üêß Binary builds on Ubuntu
    runs-on: ubuntu-latest
    needs: [semantic-release]
    if: ${{ needs.semantic-release.outputs.release == 'True' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Upload release docs artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: |
            build/release-intro.md
      - name: Install build deps
        run: |
          sudo apt install -qy tree jq cmake make gcc musl-tools musl-dev gcc-mingw-w64 libreadline-dev ccache
      - name: Build x86_64 with musl-system
        run: |
          make musl RELEASE=1 CCACHE=1
      - name: Upload artifact linux-amd64
        uses: actions/upload-artifact@v4
        with:
          name: release-bin-linux-amd64
          path: |
            zenroom
            zencode-exec
      - name: Clean for next build
        run: |
          make clean
      - name: Build x86_64 shlib
        run: |
          make linux-lib RELEASE=1 CCACHE=1
      - name: Upload artifact linux-lib-amd64
        uses: actions/upload-artifact@v4
        with:
          name: release-lib-linux-amd64
          path: |
            libzenroom.so
      - name: Clean for next build
        run: make clean
      - name: Build x86_64 windows .exe
        run: |
          make win-exe RELEASE=1 CCACHE=1
          make clean -C src
          make win-dll RELEASE=1 CCACHE=1
      - name: Upload artifact win x86_64
        uses: actions/upload-artifact@v4
        with:
          name: release-exe-win-w64
          path: |
            zenroom.exe
            zencode-exec.exe
            libzenroom_dll.lib
            zenroom.dll

  file-changes:
    name: "üóÉÔ∏è  Check file changes"
    runs-on: ubuntu-latest
    needs: [semantic-release]
    if: "needs.semantic-release.outputs.release == 'True'"
    outputs:
      python3: ${{ steps.filter.outputs.python3 }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          python3:
            - 'bindings/python3/**'

  python-sdist:
    name: üêç Python create source distribution
    runs-on: ubuntu-latest
    needs: [semantic-release, file-changes]
    if: "needs.semantic-release.outputs.release == 'True' && needs.file-changes.outputs.python3 == 'true'"
    defaults:
      run:
        working-directory: bindings/python3
    steps:
    - uses: actions/checkout@v4
      with:
        ref: master
        fetch-depth: 0
    - run: |
        pip install --prefer-binary ninja twine
        ./prepare.sh
    - run: pipx run build --sdist
    - run: twine check dist/*.tar.gz
    - uses: actions/upload-artifact@v4
      with:
        path: ./bindings/python3/dist/*.tar.gz

  build-release-on-osx:
    name: üçé mac osx release build
    needs: [semantic-release]
    runs-on: macos-latest
    if: ${{ needs.semantic-release.outputs.release == 'True' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: hendrikmuhs/ccache-action@v1.2
      - run: |
          make osx-exe RELEASE=1 CCACHE=1
          make -C src clean
          make osx-lib RELEASE=1 CCACHE=1
      - name: Upload artifacts for Apple OSX
        uses: actions/upload-artifact@v4
        with:
          name: release-apple-osx
          path: |
            zenroom.command
            zencode-exec.command
            libzenroom.dylib

  npm-release:
    name: üì¶ npm release
    runs-on: ubuntu-latest
    needs: [js-build-release, build-release-on-osx, build-release-on-ubuntu]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: 'https://registry.npmjs.org'
      - uses: actions/download-artifact@v4
        with:
          name: javascript-artifact
          path: .
      - run: |
          version=$(git describe --tags --abbrev=0)
          yarn version --new-version ${version:1} --no-git-tag-version
      - run: npm publish . --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  pypi-release:
    name: üì¶ PyPI release
    needs: [js-build-release, python-sdist, build-release-on-osx, build-release-on-ubuntu]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: artifact
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  draft-binary-release:
    name: üì¶ Pack release
    needs: [semantic-release, js-build-release, build-release-on-osx, build-release-on-ubuntu]
    runs-on: ubuntu-latest
    steps:
      - name: download binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: |
            zenroom-bin
      - name: show directory structure
        run: tree -dL 3
      - name: relase all binary artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            zenroom-bin/release*/*
          tag_name: ${{ needs.semantic-release.outputs.version }}
          body_path: zenroom-bin/documentation/release-intro.md
          append_body: true
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          generate_release_notes: true

  publish_docker_image:
    name: üê≥ Publish Docker image
    needs: [semantic-release, js-build-release, build-release-on-osx, build-release-on-ubuntu]
    uses: ForkbombEu/workflows/.github/workflows/publish-ghcr.yml@main
    secrets: inherit

  remove-tag-on-fail:
    name: üßª Remove tag on fail
    needs: [semantic-release, js-build-release, build-release-on-osx, build-release-on-ubuntu]
    runs-on: ubuntu-latest
    if: ${{ (failure() || cancelled()) && needs.semantic-release.outputs.release == 'True' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Remove tag
        uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          tag_name: ${{ needs.semantic-release.outputs.version }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: false
          repo: dyne/zenroom
